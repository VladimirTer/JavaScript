# Основные типы данных

1. **Числа (Numbers)**:
   - В JavaScript числа могут быть целыми или с плавающей точкой.
   - Примеры:

```javascript
let num1 = 10;       // Целое число
let num2 = 3.14;     // Число с плавающей точкой
let num3 = 2 + 3;    // Математическая операция (+)
let num4 = num1 / 2; // Деление
console.log(num3);   // Выведет: 5
console.log(num4);   // Выведет: 5
```

2. **Строки (Strings)**:
   - Строки используются для хранения текстовых данных и должны быть заключены в одинарные (`'`) или двойные кавычки (`"`).
   - Примеры:

```javascript
let str1 = "Hello";                 // Строка в двойных кавычках
let str2 = 'Привет';                 // Строка в одинарных кавычках
let str3 = "Это \"кавычки\"";        // Экранирование символов
let str4 = str1 + ' ' + str2;       // Конкатенация строк (+)
console.log(str3);                  // Выведет: Это "кавычки"
console.log(str4);                  // Выведет: Hello Привет
```

3. **Булев тип (Boolean)**:
   - Булев тип представляет логические значения `true` (истина) и `false` (ложь).
   - Примеры:

```javascript
let isTrue = true;
let isFalse = false;
let num1 = 10;
let num2 = 5;
let isGreater = num1 > num2;        // Операторы сравнения возвращают булевы значения
console.log(isGreater);             // Выведет: true
```

4. **Массивы (Arrays)**:
   - Массивы в JavaScript используются для хранения упорядоченных коллекций элементов.
   - Они объявляются с использованием квадратных скобок (`[]`) и элементы разделяются запятыми.
   - Индексация элементов в массиве начинается с нуля.
   - Примеры:

```javascript
let arr1 = [1, 2, 3, 4, 5];       // Массив чисел
let arr2 = ['apple', 'banana'];   // Массив строк
let arr3 = [true, false, true];   // Массив булевых значений
console.log(arr1[0]);             // Выведет: 1 (получение элемента по индексу)
console.log(arr2.length);         // Выведет: 2 (длина массива)
```

5. **Объекты (Objects)**:
   - Объекты в JavaScript представляют наборы ключей и значений.
   - Они объявляются с использованием фигурных скобок (`{}`) и состоят из пар ключ-значение, разделенных запятыми.
   - Примеры:

```javascript
let obj1 = {                     // Объект с ключами и значениями
  name: 'John',
  age: 25,
  isStudent: true
};

console.log(obj1.name);          // Выведет: John (получение значения по ключу)
console.log(obj1.age);           // Выведет: 25

obj1.city = 'New York';          // Добавление нового свойства к объекту
console.log(obj1);               // Выведет: { name: 'John', age: 25, isStudent: true, city: 'New York' }
```

6. **Null и Undefined**:
   - `null` и `undefined` представляют отсутствие значения (пустоту).
   - `null` является специальным значением, задающим отсутствие объектного значения.
   - `undefined` используется, когда значение переменной не определено.
   - Примеры:

```javascript
let foo = null;                 // Значение переменной явно установлено в null
let bar;                        // Значение переменной не определено, поэтому она равна undefined

console.log(foo);               // Выведет: null
console.log(bar);               // Выведет: undefined
```

Это основные типы данных в JavaScript. В языке также присутствуют другие типы данных, такие как функции, дата, регулярные выражения и др. Однако, вышеуказанные типы данных являются фундаментальными и широко используются при разработке на JavaScript.
